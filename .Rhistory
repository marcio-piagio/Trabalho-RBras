axis.text.x = element_text(size = base_size * 0.8, lineheight = 0.5, face = "bold", colour = "grey40", vjust = 1),
axis.text.y = element_text(size = base_size * 0.8, lineheight = 0.5, face = "bold", colour = ifelse(Y==N,"red","grey40"), hjust = 1),
axis.ticks = element_line(colour = "grey25"),
axis.title.x = element_text(size = base_size, face = "bold", color="black", margin = margin(t = 10)),
axis.title.y = element_text(size = base_size, face = "bold", angle = 90, color="black", margin = margin(r = 10)),
axis.ticks.length = unit(0.15, "cm"),
axis.ticks.margin = unit(0.10, "cm"),
# # legend.background = element_rect(colour = "steelblue4", size = .8),
# legend.margin = unit(0.2, "cm"),
# # legend.key = element_rect(fill = alpha(colour = "azure", alpha = 0.20), colour = "steelblue4"),
# legend.key.size = unit(1.2, "lines"),
# legend.key.height = NULL,
# legend.key.width = NULL,
# legend.text = element_text(size = base_size * 0.8, face = "bold", color="black"),
# legend.text.align = NULL,
# legend.title = element_text(size = base_size * 0.8, face = "bold", hjust = 0, color="black"),
# legend.title.align = NULL,
# legend.position = "bottom",
# legend.direction = NULL,
# legend.justification = "center",
# legend.box = NULL,
panel.background = element_rect(fill = alpha(colour = "white", alpha = 0.2), color="grey25"),
# panel.border = element_blank(),
# panel.grid.major = element_line(colour = "grey25", linetype = "dashed", size = 0.25),
# panel.grid.minor = element_line(colour = "grey25", linetype = "dotted", size = 0.25),
# panel.margin = unit(0.25, "lines"),
strip.background = element_rect(fill = "grey50", colour = NA),
strip.text.x = element_text(size = base_size * 0.75),
strip.text.y = element_text(colour = NA, size = base_size * 0.8, angle = 90),
plot.background = element_rect(colour = NA, fill = "white"),
plot.title = element_text(size = base_size*1.5, color="black", face = "bold", , margin = margin(b = 10)),
plot.margin = unit(c(1, 1, 0.5, 0.5), "lines"), complete = TRUE)
}
theme(
# Elements in the first block are not used directly, but are inherited by others
line = element_line(colour = "grey25", size = 0.5, linetype = 1, lineend = "butt"),
rect = element_rect(fill = "white", colour = "grey25", size = 0.5, linetype = 1),
text = element_text(family = base_family, face = "plain", colour = "black", size = base_size, hjust = 0.5, vjust = 0.5, angle = 0, lineheight = 0.9),
axis.text = element_text(size = rel(0.8), colour = "grey50"),
strip.text = element_text(size = rel(0.8)),
axis.line = element_blank(),
axis.text.x = element_text(size = base_size * 0.8, lineheight = 0.5, face = "bold", colour = "grey40", vjust = 1),
axis.text.y = element_text(size = base_size * 0.8, lineheight = 0.5, face = "bold", colour = ifelse(N,"red","grey40"), hjust = 1),
axis.ticks = element_line(colour = "grey25"),
axis.title.x = element_text(size = base_size, face = "bold", color="black", margin = margin(t = 10)),
axis.title.y = element_text(size = base_size, face = "bold", angle = 90, color="black", margin = margin(r = 10)),
axis.ticks.length = unit(0.15, "cm"),
axis.ticks.margin = unit(0.10, "cm"),
# # legend.background = element_rect(colour = "steelblue4", size = .8),
# legend.margin = unit(0.2, "cm"),
# # legend.key = element_rect(fill = alpha(colour = "azure", alpha = 0.20), colour = "steelblue4"),
# legend.key.size = unit(1.2, "lines"),
# legend.key.height = NULL,
# legend.key.width = NULL,
# legend.text = element_text(size = base_size * 0.8, face = "bold", color="black"),
# legend.text.align = NULL,
# legend.title = element_text(size = base_size * 0.8, face = "bold", hjust = 0, color="black"),
# legend.title.align = NULL,
# legend.position = "bottom",
# legend.direction = NULL,
# legend.justification = "center",
# legend.box = NULL,
panel.background = element_rect(fill = alpha(colour = "white", alpha = 0.2), color="grey25"),
# panel.border = element_blank(),
# panel.grid.major = element_line(colour = "grey25", linetype = "dashed", size = 0.25),
# panel.grid.minor = element_line(colour = "grey25", linetype = "dotted", size = 0.25),
# panel.margin = unit(0.25, "lines"),
strip.background = element_rect(fill = "grey50", colour = NA),
strip.text.x = element_text(size = base_size * 0.75),
strip.text.y = element_text(colour = NA, size = base_size * 0.8, angle = 90),
plot.background = element_rect(colour = NA, fill = "white"),
plot.title = element_text(size = base_size*1.5, color="black", face = "bold", , margin = margin(b = 10)),
plot.margin = unit(c(1, 1, 0.5, 0.5), "lines"), complete = TRUE)
theme_black <- function(base_size = 12, base_family = "",N,Y) {
require(grid)
theme(
# Elements in the first block are not used directly, but are inherited by others
line = element_line(colour = "grey25", size = 0.5, linetype = 1, lineend = "butt"),
rect = element_rect(fill = "white", colour = "grey25", size = 0.5, linetype = 1),
text = element_text(family = base_family, face = "plain", colour = "black", size = base_size, hjust = 0.5, vjust = 0.5, angle = 0, lineheight = 0.9),
axis.text = element_text(size = rel(0.8), colour = "grey50"),
strip.text = element_text(size = rel(0.8)),
axis.line = element_blank(),
axis.text.x = element_text(size = base_size * 0.8, lineheight = 0.5, face = "bold", colour = "grey40", vjust = 1),
axis.text.y = element_text(size = base_size * 0.8, lineheight = 0.5, face = "bold", colour = ifelse(N,"red","grey40"), hjust = 1),
axis.ticks = element_line(colour = "grey25"),
axis.title.x = element_text(size = base_size, face = "bold", color="black", margin = margin(t = 10)),
axis.title.y = element_text(size = base_size, face = "bold", angle = 90, color="black", margin = margin(r = 10)),
axis.ticks.length = unit(0.15, "cm"),
axis.ticks.margin = unit(0.10, "cm"),
# # legend.background = element_rect(colour = "steelblue4", size = .8),
# legend.margin = unit(0.2, "cm"),
# # legend.key = element_rect(fill = alpha(colour = "azure", alpha = 0.20), colour = "steelblue4"),
# legend.key.size = unit(1.2, "lines"),
# legend.key.height = NULL,
# legend.key.width = NULL,
# legend.text = element_text(size = base_size * 0.8, face = "bold", color="black"),
# legend.text.align = NULL,
# legend.title = element_text(size = base_size * 0.8, face = "bold", hjust = 0, color="black"),
# legend.title.align = NULL,
# legend.position = "bottom",
# legend.direction = NULL,
# legend.justification = "center",
# legend.box = NULL,
panel.background = element_rect(fill = alpha(colour = "white", alpha = 0.2), color="grey25"),
# panel.border = element_blank(),
# panel.grid.major = element_line(colour = "grey25", linetype = "dashed", size = 0.25),
# panel.grid.minor = element_line(colour = "grey25", linetype = "dotted", size = 0.25),
# panel.margin = unit(0.25, "lines"),
strip.background = element_rect(fill = "grey50", colour = NA),
strip.text.x = element_text(size = base_size * 0.75),
strip.text.y = element_text(colour = NA, size = base_size * 0.8, angle = 90),
plot.background = element_rect(colour = NA, fill = "white"),
plot.title = element_text(size = base_size*1.5, color="black", face = "bold", , margin = margin(b = 10)),
plot.margin = unit(c(1, 1, 0.5, 0.5), "lines"), complete = TRUE)
}
# grouped boxplot
ggplot(k5.N50, aes(x=c, y=N, fill=Modelo)) +
geom_boxplot(show.legend=T)+
geom_hline(yintercept = 50, color="red", linetype = "dashed")+
# facet_wrap(~Modelo)+
ggtitle("N = 50")+
ylab("Estimativa do tamanho populacional")+xlab("Estimativa do parÃ¢metro de recaptura")+
theme_black(12,"",50,k6.N50$N)+
theme(legend.position = "bottom", legend.background = element_rect(colour = "gray50", size = .6))+
scale_fill_manual("", values = c("Mt" = cor[1], "Mtb" = cor[8]))+
scale_y_continuous(
breaks = seq(25, 375, by = 25)
)
theme(
# Elements in the first block are not used directly, but are inherited by others
line = element_line(colour = "grey25", size = 0.5, linetype = 1, lineend = "butt"),
rect = element_rect(fill = "white", colour = "grey25", size = 0.5, linetype = 1),
text = element_text(family = base_family, face = "plain", colour = "black", size = base_size, hjust = 0.5, vjust = 0.5, angle = 0, lineheight = 0.9),
axis.text = element_text(size = rel(0.8), colour = "grey50"),
strip.text = element_text(size = rel(0.8)),
axis.line = element_blank(),
axis.text.x = element_text(size = base_size * 0.8, lineheight = 0.5, face = "bold", colour = "grey40", vjust = 1),
axis.text.y = element_text(size = base_size * 0.8, lineheight = 0.5, face = "bold", colour = "grey40", hjust = 1),
axis.ticks = element_line(colour = "grey25"),
axis.title.x = element_text(size = base_size, face = "bold", color="black", margin = margin(t = 10)),
axis.title.y = element_text(size = base_size, face = "bold", angle = 90, color="black", margin = margin(r = 10)),
axis.ticks.length = unit(0.15, "cm"),
axis.ticks.margin = unit(0.10, "cm"),
# # legend.background = element_rect(colour = "steelblue4", size = .8),
# legend.margin = unit(0.2, "cm"),
# # legend.key = element_rect(fill = alpha(colour = "azure", alpha = 0.20), colour = "steelblue4"),
# legend.key.size = unit(1.2, "lines"),
# legend.key.height = NULL,
# legend.key.width = NULL,
# legend.text = element_text(size = base_size * 0.8, face = "bold", color="black"),
# legend.text.align = NULL,
# legend.title = element_text(size = base_size * 0.8, face = "bold", hjust = 0, color="black"),
# legend.title.align = NULL,
# legend.position = "bottom",
# legend.direction = NULL,
# legend.justification = "center",
# legend.box = NULL,
panel.background = element_rect(fill = alpha(colour = "white", alpha = 0.2), color="grey25"),
# panel.border = element_blank(),
# panel.grid.major = element_line(colour = "grey25", linetype = "dashed", size = 0.25),
# panel.grid.minor = element_line(colour = "grey25", linetype = "dotted", size = 0.25),
# panel.margin = unit(0.25, "lines"),
strip.background = element_rect(fill = "grey50", colour = NA),
strip.text.x = element_text(size = base_size * 0.75),
strip.text.y = element_text(colour = NA, size = base_size * 0.8, angle = 90),
plot.background = element_rect(colour = NA, fill = "white"),
plot.title = element_text(size = base_size*1.5, color="black", face = "bold", , margin = margin(b = 10)),
plot.margin = unit(c(1, 1, 0.5, 0.5), "lines"), complete = TRUE)
theme_black <- function(base_size = 12, base_family = "") {
require(grid)
theme(
# Elements in the first block are not used directly, but are inherited by others
line = element_line(colour = "grey25", size = 0.5, linetype = 1, lineend = "butt"),
rect = element_rect(fill = "white", colour = "grey25", size = 0.5, linetype = 1),
text = element_text(family = base_family, face = "plain", colour = "black", size = base_size, hjust = 0.5, vjust = 0.5, angle = 0, lineheight = 0.9),
axis.text = element_text(size = rel(0.8), colour = "grey50"),
strip.text = element_text(size = rel(0.8)),
axis.line = element_blank(),
axis.text.x = element_text(size = base_size * 0.8, lineheight = 0.5, face = "bold", colour = "grey40", vjust = 1),
axis.text.y = element_text(size = base_size * 0.8, lineheight = 0.5, face = "bold", colour = "grey40", hjust = 1),
axis.ticks = element_line(colour = "grey25"),
axis.title.x = element_text(size = base_size, face = "bold", color="black", margin = margin(t = 10)),
axis.title.y = element_text(size = base_size, face = "bold", angle = 90, color="black", margin = margin(r = 10)),
axis.ticks.length = unit(0.15, "cm"),
axis.ticks.margin = unit(0.10, "cm"),
# # legend.background = element_rect(colour = "steelblue4", size = .8),
# legend.margin = unit(0.2, "cm"),
# # legend.key = element_rect(fill = alpha(colour = "azure", alpha = 0.20), colour = "steelblue4"),
# legend.key.size = unit(1.2, "lines"),
# legend.key.height = NULL,
# legend.key.width = NULL,
# legend.text = element_text(size = base_size * 0.8, face = "bold", color="black"),
# legend.text.align = NULL,
# legend.title = element_text(size = base_size * 0.8, face = "bold", hjust = 0, color="black"),
# legend.title.align = NULL,
# legend.position = "bottom",
# legend.direction = NULL,
# legend.justification = "center",
# legend.box = NULL,
panel.background = element_rect(fill = alpha(colour = "white", alpha = 0.2), color="grey25"),
# panel.border = element_blank(),
# panel.grid.major = element_line(colour = "grey25", linetype = "dashed", size = 0.25),
# panel.grid.minor = element_line(colour = "grey25", linetype = "dotted", size = 0.25),
# panel.margin = unit(0.25, "lines"),
strip.background = element_rect(fill = "grey50", colour = NA),
strip.text.x = element_text(size = base_size * 0.75),
strip.text.y = element_text(colour = NA, size = base_size * 0.8, angle = 90),
plot.background = element_rect(colour = NA, fill = "white"),
plot.title = element_text(size = base_size*1.5, color="black", face = "bold", , margin = margin(b = 10)),
plot.margin = unit(c(1, 1, 0.5, 0.5), "lines"), complete = TRUE)
}
# grouped boxplot
ggplot(k5.N50, aes(x=c, y=N, fill=Modelo)) +
geom_boxplot(show.legend=T)+
geom_hline(yintercept = 50, color="red", linetype = "dashed")+
# facet_wrap(~Modelo)+
ggtitle("N = 50")+
ylab("Estimativa do tamanho populacional")+xlab("Estimativa do parÃ¢metro de recaptura")+
theme_black(12,"",50,k6.N50$N)+
theme(legend.position = "bottom", legend.background = element_rect(colour = "gray50", size = .6))+
scale_fill_manual("", values = c("Mt" = cor[1], "Mtb" = cor[8]))+
scale_y_continuous(
breaks = seq(25, 375, by = 25)
)
# grouped boxplot
ggplot(k5.N50, aes(x=c, y=N, fill=Modelo)) +
geom_boxplot(show.legend=T)+
geom_hline(yintercept = 50, color="red", linetype = "dashed")+
# facet_wrap(~Modelo)+
ggtitle("N = 50")+
ylab("Estimativa do tamanho populacional")+xlab("Estimativa do parÃ¢metro de recaptura")+
theme_black()+
theme(legend.position = "bottom", legend.background = element_rect(colour = "gray50", size = .6))+
scale_fill_manual("", values = c("Mt" = cor[1], "Mtb" = cor[8]))+
scale_y_continuous(
breaks = seq(25, 375, by = 25)
)
library(ggplot2)
library(RColorBrewer)
cor <- brewer.pal(8, "Dark2")
library(ggplot2)
library(ggtext) # Para element_markdown()
install.packages("ggtext")
ggplot(k5.N50, aes(x = c, y = N, fill = Modelo)) +
geom_boxplot(show.legend = TRUE) +
geom_hline(yintercept = 50, color = "red", linetype = "dashed") +
ggtitle("N = 50") +
ylab("Estimativa do tamanho populacional") +
xlab("Estimativa do parÃ¢metro de recaptura") +
theme_black() +
theme(
legend.position = "bottom",
legend.background = element_rect(colour = "gray50", size = 0.6),
axis.text.y = ggtext::element_markdown() # Permite HTML nos rÃ³tulos
) +
scale_fill_manual("", values = c("Mt" = cor[1], "Mtb" = cor[8])) +
scale_y_continuous(
breaks = seq(25, 375, by = 25),
labels = function(x) {
ifelse(x == 50, "<span style='color:red;'>50</span>", x)
}
)
ifelse(x == 2, "<span style='color:red;'>50</span>", x)
ggplot(k5.N50, aes(x = c, y = N, fill = Modelo)) +
geom_boxplot(show.legend = TRUE) +
geom_hline(yintercept = 50, color = "red", linetype = "dashed") +
ggtitle("N = 50") +
ylab("Estimativa do tamanho populacional") +
xlab("Estimativa do parÃ¢metro de recaptura") +
theme_black() +
theme(
legend.position = "bottom",
legend.background = element_rect(colour = "gray50", size = 0.6),
axis.text.y = ggtext::element_markdown() # Permite HTML nos rÃ³tulos
) +
scale_fill_manual("", values = c("Mt" = cor[1], "Mtb" = cor[8])) +
scale_y_continuous(
breaks = seq(25, 375, by = 25),
labels = function(x) {
ifelse(x == 50, "<span style='color:red;'>50</span>", x)
}
) +
scale_x_continuous(
# breaks = seq(25, 375, by = 25),
labels = function(x) {
ifelse(x == 2, "<span style='color:red;'>50</span>", x)
}
)
ifelse(x == 0, "<span style='color:red;'>50</span>", x)
ggplot(k5.N50, aes(x = c, y = N, fill = Modelo)) +
geom_boxplot(show.legend = TRUE) +
geom_hline(yintercept = 50, color = "red", linetype = "dashed") +
ggtitle("N = 50") +
ylab("Estimativa do tamanho populacional") +
xlab("Estimativa do parÃ¢metro de recaptura") +
theme_black() +
theme(
legend.position = "bottom",
legend.background = element_rect(colour = "gray50", size = 0.6),
axis.text.y = ggtext::element_markdown() # Permite HTML nos rÃ³tulos
) +
scale_fill_manual("", values = c("Mt" = cor[1], "Mtb" = cor[8])) +
scale_y_continuous(
breaks = seq(25, 375, by = 25),
labels = function(x) {
ifelse(x == 50, "<span style='color:red;'>50</span>", x)
}
) +
scale_x_continuous(
# breaks = seq(25, 375, by = 25),
labels = function(x) {
ifelse(x == 0, "<span style='color:red;'>50</span>", x)
}
)
ggplot(k5.N50, aes(x = c, y = N, fill = Modelo)) +
geom_boxplot(show.legend = TRUE) +
geom_hline(yintercept = 50, color = "red", linetype = "dashed") +
ggtitle("N = 50") +
ylab("Estimativa do tamanho populacional") +
xlab("Estimativa do parÃ¢metro de recaptura") +
theme_black() +
theme(
legend.position = "bottom",
legend.background = element_rect(colour = "gray50", size = 0.6),
axis.text.y = ggtext::element_markdown() # Permite HTML nos rÃ³tulos
) +
scale_fill_manual("", values = c("Mt" = cor[1], "Mtb" = cor[8])) +
scale_y_continuous(
breaks = seq(25, 375, by = 25),
labels = function(x) {
ifelse(x == 50, "<span style='color:red;'>50</span>", x)
}
)
ggplot(k6.N50, aes(x = c, y = N, fill = Modelo)) +
geom_boxplot(show.legend = TRUE) +
geom_hline(yintercept = 50, color = "red", linetype = "dashed") +
ggtitle("N = 50") +
ylab("Estimativa do tamanho populacional") +
xlab("Estimativa do parÃ¢metro de recaptura") +
theme_black() +
theme(
legend.position = "bottom",
legend.background = element_rect(colour = "gray50", size = 0.6),
axis.text.y = ggtext::element_markdown() # Permite HTML nos rÃ³tulos
) +
scale_fill_manual("", values = c("Mt" = cor[1], "Mtb" = cor[8])) +
scale_y_continuous(
breaks = seq(25, 375, by = 25),
labels = function(x) {
ifelse(x == 50, "<span style='color:red;'>50</span>", x)
}
)
tapply(k5.N50$N,k5.N50$Modelo,summary)
tapply(k6.N50$N,k6.N50$Modelo,summary)
ggplot(k6.N50, aes(x = c, y = N, fill = Modelo)) +
geom_boxplot(show.legend = TRUE) +
geom_hline(yintercept = 50, color = "red", linetype = "dashed") +
ggtitle("N = 50") +
ylab("Estimativa do tamanho populacional") +
xlab("Estimativa do parÃ¢metro de recaptura") +
theme_black() +
theme(
legend.position = "bottom",
legend.background = element_rect(colour = "gray50", size = 0.6),
axis.text.y = ggtext::element_markdown() # Permite HTML nos rÃ³tulos
) +
scale_fill_manual("", values = c("Mt" = cor[1], "Mtb" = cor[8])) +
scale_y_continuous(
breaks = seq(25, 475, by = 25),
labels = function(x) {
ifelse(x == 50, "<span style='color:red;'>50</span>", x)
}
)
tapply(k5.N50$N,k5.N50$Modelo,summary)
tapply(k6.N50$N,k6.N50$Modelo,summary)
max(k6.N50$N)
ggplot(k6.N50, aes(x = c, y = N, fill = Modelo)) +
geom_boxplot(show.legend = TRUE) +
geom_hline(yintercept = 50, color = "red", linetype = "dashed") +
ggtitle("N = 50") +
ylab("Estimativa do tamanho populacional") +
xlab("Estimativa do parÃ¢metro de recaptura") +
theme_black() +
theme(
legend.position = "bottom",
legend.background = element_rect(colour = "gray50", size = 0.6),
axis.text.y = ggtext::element_markdown() # Permite HTML nos rÃ³tulos
) +
scale_fill_manual("", values = c("Mt" = cor[1], "Mtb" = cor[8])) +
scale_y_continuous(
breaks = seq(25, max(k6.N50$N, na.rm = T), by = 25),
labels = function(x) {
ifelse(x == 50, "<span style='color:red;'>50</span>", x)
}
)
ggplot(k6.N50, aes(x = c, y = N, fill = Modelo)) +
geom_boxplot(show.legend = TRUE) +
geom_hline(yintercept = 50, color = "red", linetype = "dashed") +
ggtitle("N = 50") +
ylab("Estimativa do tamanho populacional") +
xlab("Estimativa do parÃ¢metro de recaptura") +
theme_black() +
theme(
legend.position = "bottom",
legend.background = element_rect(colour = "gray50", size = 0.6),
axis.text.y = ggtext::element_markdown() # Permite HTML nos rÃ³tulos
) +
scale_fill_manual("", values = c("Mt" = cor[1], "Mtb" = cor[8])) +
scale_y_continuous(
breaks = seq(50, max(k6.N50$N, na.rm = T), by = 50),
labels = function(x) {
ifelse(x == 50, "<span style='color:red;'>50</span>", x)
}
)
ggplot(k6.N50, aes(x = c, y = N, fill = Modelo)) +
geom_boxplot(show.legend = TRUE) +
geom_hline(yintercept = 50, color = "red", linetype = "dashed") +
ggtitle("N = 50") +
ylab("Estimativa do tamanho populacional") +
xlab("Estimativa do parÃ¢metro de recaptura") +
theme_black() +
theme(
legend.position = "bottom",
legend.background = element_rect(colour = "gray50", size = 0.6),
axis.text.y = ggtext::element_markdown() # Permite HTML nos rÃ³tulos
) +
scale_fill_manual("", values = c("Mt" = cor[1], "Mtb" = cor[8])) +
scale_y_continuous(
breaks = seq(50, max(k6.N50$N, na.rm = T), by = 100),
labels = function(x) {
ifelse(x == 50, "<span style='color:red;'>50</span>", x)
}
)
ggplot(k6.N50, aes(x = c, y = N, fill = Modelo)) +
geom_boxplot(show.legend = TRUE) +
geom_hline(yintercept = 50, color = "red", linetype = "dashed") +
ggtitle("N = 50") +
ylab("Estimativa do tamanho populacional") +
xlab("Estimativa do parÃ¢metro de recaptura") +
theme_black() +
theme(
legend.position = "bottom",
legend.background = element_rect(colour = "gray50", size = 0.6),
axis.text.y = ggtext::element_markdown() # Permite HTML nos rÃ³tulos
) +
scale_fill_manual("", values = c("Mt" = cor[1], "Mtb" = cor[8])) +
scale_y_continuous(
breaks = seq(50, max(k6.N50$N, na.rm = T) + 100, by = 100),
labels = function(x) {
ifelse(x == 50, "<span style='color:red;'>50</span>", x)
}
)
ggplot(k6.N50, aes(x = c, y = N, fill = Modelo)) +
geom_boxplot(show.legend = TRUE) +
geom_hline(yintercept = 50, color = "red", linetype = "dashed") +
ggtitle("N = 50") +
ylab("Estimativa do tamanho populacional") +
xlab("Estimativa do parÃ¢metro de recaptura") +
theme_black() +
theme(
legend.position = "bottom",
legend.background = element_rect(colour = "gray50", size = 0.6),
axis.text.y = ggtext::element_markdown() # Permite HTML nos rÃ³tulos
) +
scale_fill_manual("", values = c("Mt" = cor[1], "Mtb" = cor[8])) +
scale_y_continuous(
breaks = seq(-50, max(k6.N50$N, na.rm = T) + 100, by = 100),
labels = function(x) {
ifelse(x == 50, "<span style='color:red;'>50</span>", x)
}
)
ggplot(k6.N50, aes(x = c, y = N, fill = Modelo)) +
geom_boxplot(show.legend = TRUE) +
geom_hline(yintercept = 50, color = "red", linetype = "dashed") +
ggtitle("N = 50") +
ylab("Estimativa do tamanho populacional") +
xlab("Estimativa do parÃ¢metro de recaptura") +
theme_black() +
theme(
legend.position = "bottom",
legend.background = element_rect(colour = "gray50", size = 0.6),
axis.text.y = ggtext::element_markdown() # Permite HTML nos rÃ³tulos
) +
scale_fill_manual("", values = c("Mt" = cor[1], "Mtb" = cor[8])) +
scale_y_continuous(
breaks = seq(-50, max(k6.N50$N, na.rm = T) , by = 100),
labels = function(x) {
ifelse(x == 50, "<span style='color:red;'>50</span>", x)
}
)
ggplot(k6.N50, aes(x = c, y = N, fill = Modelo)) +
geom_boxplot(show.legend = TRUE) +
geom_hline(yintercept = 50, color = "red", linetype = "dashed") +
ggtitle("N = 50") +
ylab("Estimativa do tamanho populacional") +
xlab("Estimativa do parÃ¢metro de recaptura") +
theme_black() +
theme(
legend.position = "bottom",
legend.background = element_rect(colour = "gray50", size = 0.6),
axis.text.y = ggtext::element_markdown() # Permite HTML nos rÃ³tulos
) +
scale_fill_manual("", values = c("Mt" = cor[1], "Mtb" = cor[8])) +
scale_y_continuous(
breaks = seq(-50, max(k6.N50$N, na.rm = T) + 100, by = 50),
labels = function(x) {
ifelse(x == 50, "<span style='color:red;'>50</span>", x)
}
)
load("C:/Users/marci/Documents/trabalho RBras/matrix.N.RData")
load("~/trabalho RBras/matrix.N.RData")
